>>> colors = ['black', 'white']
>>> sizes = ['S', 'M', 'L']

# Use a genexp with a Cartesian product to print out a roster of T-shirts of two colors in three sizes.
# The six-item list of T-shirts is never built in memory: the generator expression feeds the for loop producing one item at a time
# If the two lists used in the Cartesian product had 1,000 items each, using a generator expression would save the expense of building a list with a million items just to feed the for loop
>>> for tshirt in ('%s %s' % (c, s) for c in colors for s in sizes):
...	print(tshirt)
black S
black M
black L
white S
white M
white L


# Tuples as records

>>> lax_coordinates = (33.9425, -118.408056)
>>> city, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)
>>> traveler_ids = [('USA', '31195855'), ('BRA', 'CE342567'), ('ESP', 'XDA205856')]
>>> for passport in sorted(traveler_ids):
... 	print('%s/%s' % passport)
BRA/CE342567
ESP/XDA205856
USA/31195855

# _ is a dummy variable because we are not interested in the second item
>>> for country, _ in traveler_ids:
...	print(country)
USA
BRA
ESP


# Tuple Upacking

>>> latitude, longitude = lax_coordinates	# tuple upacking
>>> latitude
33.9425
>>> longitude
-118.408056

# An elegant application of tuple unpacking is swapping the values of variables without using a temporary variable
>>> a, b = (1, 3)
>>> b, a = a, b
>>> a, b
(3, 1)

# Another wxample of tuple unpacking is prefixing an argument with a star whencalling a function
>>> divmod(20, 8)
(2, 4)
>>> t = (20, 8)
>>> divmod(*t)
(2, 4)

# A further use of tuple unpacking: enabling functions to return multiple values in a way that is convenient to the caller
>>> quotient, remainder = divmod(*t)
>>> quotient, remainder
(2, 4)

# Using * to grab excess items
>>> a, b, *rest = range(5)
>>> a, b, rest
(0, 1, [2, 3, 4])
>>> a, b, *rest = range(3)
>>> a, b, rest
(0, 1, [2])
>>> a, b, *rest = range(2)
>>> a, b, rest
(0, 1, [])
>>> a, *body, c, d = range(5)	# The * prefix can appear in any position
>>> a, body, c, d
(0, [1, 2], 3, 4)
>>> *head, b, c, d = range(5)
>>> head, b, c, d
([0, 1], 2, 3, 4)


Nested Tuple Unpacking

>>> metro_areas = [
...	('Tokyo', 'JP', 36.933, (35.689722, 139.691667)),   
...	('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),    
...	('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),
...	('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),    
...	('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)), 
... ]

# {:^9} format means width is 9 and alignment is center align
>>> print('{:15} | {:^9} | {:^9}'.format('', 'lat.', 'long.'))
                |   lat.    |   long.  
>>> fmt = '{:15} | {:9.4f} | {:9.4f}'
>>> for name, cc, pop, (latitude, longitude) in metro_areas:
...	if longitude <= 0:
...		print(fmt.format(name, latitude, longitude))
Mexico City     |   19.4333 |  -99.1333
New York-Newark |   40.8086 |  -74.0204
Sao Paulo       |  -23.5478 |  -46.6358
