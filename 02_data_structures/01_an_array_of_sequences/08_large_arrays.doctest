If the list will only contain numbers, an array.array is more efficient than a list: it supports all mutable sequence operations (including .pop, .insert, and .extend), and additional methods for fast loading and saving such as .frombytes and .tofile.

>>> from array import array
>>> from random import random, seed
>>> seed(1)
>>> floats = array('d', (random() for i in range(10**7)))	# Create an array of double-precision floats
>>> floats[-1]
0.13881319847100515

Writing and reading 10 million double-precision floats to and from binary file are much faster than text file
Saving using the pickle module is almost as fast, and pickle handles almost all built-in types (complex numbers, nested collections and even instances of user-defined classes)
>>> fp = open('floats.bin', 'wb')
>>> floats.tofile(fp)
>>> fp.close()
>>> floats2 = array('d')
>>> fp = open('floats.bin', 'rb')
>>> floats2.fromfile(fp, 10**7)		# Read 10 million numbers from the binary file
>>> fp.close()
>>> floats2[-1]
0.13881319847100515
>>> floats2 == floats
True
