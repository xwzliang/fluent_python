Essentially, itemgetter(1) does the same as lambda fields: fields[1]: create a function that, given a collection, returns the item at index 1.

>>> metro_data = [ 
...     ('Tokyo', 'JP', 36.933, (35.689722, 139.691667)), 
...     ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)), 
...     ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)), 
...     ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)), 
...     ('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)), 
... ]

>>> from operator import itemgetter
>>> for city in sorted(metro_data, key=itemgetter(1)):
... 	print(city)
('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833))
('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889))
('Tokyo', 'JP', 36.933, (35.689722, 139.691667))
('Mexico City', 'MX', 20.142, (19.433333, -99.133333))
('New York-Newark', 'US', 20.104, (40.808611, -74.020386))


If you pass multiple index arguments to itemgetter, the function it builds will return tuples with the extracted values:

>>> cc_name = itemgetter(1, 0)
>>> for city in metro_data:
... 	print(cc_name(city))
('JP', 'Tokyo')
('IN', 'Delhi NCR')
('MX', 'Mexico City')
('US', 'New York-Newark')
('BR', 'Sao Paulo')


Because itemgetter uses the [] operator, it supports not only sequences but also map‚Äê pings and any class that implements __getitem__.
