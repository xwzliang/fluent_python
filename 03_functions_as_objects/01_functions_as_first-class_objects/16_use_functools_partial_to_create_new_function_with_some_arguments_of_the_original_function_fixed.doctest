functools.partial is a higher-order function that allows partial application of a function. Given a function, a partial application produces a new callable with some of the arguments of the original function fixed. This is useful to adapt a function that takes one or more arguments to an API that requires a callback with fewer arguments.

>>> from operator import mul
>>> from functools import partial
>>> triple = partial(mul, 3)	# Create new triple function from mul, binding first positional argument to 3
>>> triple(7)
21
>>> list(map(triple, range(1, 10)))		# Use triple with map; mul would not work with map in this example
[3, 6, 9, 12, 15, 18, 21, 24, 27]


A more useful example involves the unicode.normalize function. If you work with text from many languages, you may want to apply unicode.normalize('NFC', s) to any strings before comparing or storing it. If you do that often, it's handy to have an nfc function to do so.

>>> import unicodedata, functools
>>> nfc = functools.partial(unicodedata.normalize, 'NFC')
>>> s1 = 'café'
>>> s2 = 'cafe\u0301'
>>> s1, s2
('café', 'café')
>>> s1 == s2
False
>>> nfc(s1) == nfc(s2)
True


partial takes a callable as first argument, followed by an arbitrary number of positional and keyword arguments to bind. for example: picture = partial(tag, 'img', cls='pic-frame')
